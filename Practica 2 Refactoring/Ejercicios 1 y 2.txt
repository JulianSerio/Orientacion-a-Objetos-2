Ejercicio 1: Algo huele mal
1.1

Problema con nombres de metodos -> Los nombres de los metodos son poco explicativos de su objetivo
Puede haber un problema si se le piden datos a un cliente y los metodos estan en private o protected
¿Es un bad smell no escribir camelCase? 

/** 
* Retorna el límite de crédito del cliente
*/
public double obtenerLimiteCliente() {...
/** 
* Retorna el monto facturado al cliente entre dos fechas 
*/
public double montoFacturadoEntre(LocalDate fechaInicio, LocalDate fechaFin) {...

/** 
* Retorna el monto cobrado al cliente entre dos fechas 
*/
public double montoCobradoEntre (LocalDate fechaInicio, LocalDate fechaFin) {...
					

1.2

Feature envy y Data Class-> Se realizo un Move Method del metodo "participaEnProyecto" de la clase Persona a la clase Proyecto, ya que Persona utilizaba un getter para obtener el contenido de una variable de Proyecto y operaba con ella, ademas la clase Proyecto era una Data Class ya que solo poseia 1 getter y la variable participantes. Esto debe ser responsabilidad de Proyecto, ya que es quien contiene la variable.   

¿Utilizar un getter es bad smell? 

1.3 

¿O Bad Naming? 
Long method -> El metodo "imprimirValores" realiza mas operaciones que solamente imprimir valores y no lo refleja en el nombre. Esto se soluciona con renombrar al metodo o extraer en metodos mas chicos sus funciones (Extract Method y Rename Method)¿

Cambio divergente ->  El metodo "imprimirValores" hace demasiadas cosas, calcula valores iterando sobre una coleccion "personal", resume informacion en un String y lo imprime. Se podrian dividir en metodos mas especificos que tengan una unica responsabilidad (Extract Method) 

¿Una posible division por 0 es un mal olor? ya que los malos olores son problemas de diseño y estructuracion mientras que esto solo es un error de logica o de ejecucucion, por lo tanto funcional pero no estructural

Y Temporary Field? -> Ya que hay variables locales


public double calcularPromedioEdades(){
	 return (double) personal.stream().mapToInt(personal -> personal.getEdad()).sum()) / personal.size();
}

public double calcularTotalSalarios(){
	return (double) personal.stream().mapToInt(personal -> personal.getSalario().sum()) / personal.size();
}

public void imprimirValores() {
	String message = String.format("El promedio de las edades es %s y el total de salarios es %s", this.calcularPromedioEdades(), this.calcularTotalSalarios());
	System.out.println(message);
}

Ejercicio 2

2.1 
Codigo Duplicado -> En las clases EmpleadoTemporario, EmpleadoPlanta y EmpleadoPasante vemos variables de instancia que son iguales y tienen el mismo proposito, "nombre","apellido"y "sueldoBasico" ademas vemos que todos calculan el sueldo de maneras diferentes pero siempre se resta al sueldo basico el 13%.
Es necesario aplicar una herencia con clase abstracta y que las sub-clases implementen su version del metodo calcularAdicional, esto se suma en un comportamiento comun en el metodo sueldo(). Hay que aplicar un Pull Up Method y un Pull Up Field


public abstract class Empleado {
	public String nombre;
	public String apellido;
	public double sueldoBasico = 0;

	public abstract double calculoAdicional();

	public double sueldo(){
		return this.sueldoBasico + this.calculoAdicional() - (this.sueldoBasico * 0.13);
	}
}


public class EmpleadoTemporario extends Empleado{
	public int horasTrabajadas = 0;
	public int cantidadHijos = 0;

	@Override
	public double calculoAdicional(){
		return this.sueldoBasico + (this.horasTrabajadas * 500) + (this.cantidadHijos * 1000)  
	}
}

public class EmpleadoPlanta extends Empleado{
	public int cantidadHijos = 0;
	
	@Override 
	public double calculoAdicional(){
		return this.sueldoBasico + (this.cantidadHijos * 2000) 
	}
	
}

public class EmpleadoPasante extends Empleado{
	@Override
	public double calculoAdicional(){
		return 0
	}
}

Data class -> Todas las clases rompen el encapsulamiento al tener sus variables de instancia en public, de esta forma se comportan como una Data class la cual solo tiene atributos públicos o getters/setters sin ninguna lógica y expone directamente. Hay que aplicar un Encapsulate Field de forma de preservar la integridad de los datos


public abstract class Empleado {
	private String nombre;
	private String apellido;
	private double sueldoBasico = 0;

	public abstract double calculoAdicional();

	public double sueldo(){
		return this.sueldoBasico + this.calculoAdicional() - (this.sueldoBasico * 0.13);
	}
}


public class EmpleadoTemporario extends Empleado{
	private int horasTrabajadas = 0;
	private int cantidadHijos = 0;

	@Override
	public double calculoAdicional(){
		return (this.horasTrabajadas * 500) + (this.cantidadHijos * 1000)  
	}
}

public class EmpleadoPlanta extends Empleado{
	private int cantidadHijos = 0;
	
	@Override 
	public double calculoAdicional(){
		return this.cantidadHijos * 2000 
	}
	
}

public class EmpleadoPasante extends Empleado{
	@Override
	public double calculoAdicional(){
		return 0
	}
}

¿es necesario aplicar otra herencia? ya que EmpleadoPlanta y EmpleadoTemporal tiene una variables en comun que es cantidad de hijos, y seria codigo duplicado

2.2 

Envidia de atributos (Feature Envy) -> La clase Juego pide y utiliza los datos publicos de la clase Jugador, esto es incorrecto ya que la modificiacion de sus variables de instancia deberia ser responsabilidad de la clase que las contiene. Hay que hacer un Move Method de la clase Juego a Jugador


public class Juego {
	// ......
   	public void incrementar(Jugador j){
		j.incrementar();
	}
	public void decrementar(Jugador j){
		j.decrementar();
	}
}

public class Jugador {
    	public String nombre;
    	public String apellido;
    	public int puntuacion = 0;
	
	public void incrementar(){
		puntuacion += 100;
	}

	public void decrementar(){
		puntuacion += 50;
	}
}

Data class -> Ahora despues de haber hecho el Move Method vemos que es totalmente innecesario tener las variables de instancia de la clase Jugador en publicos ya que previamente se comportaba con una Data class. Hay que aplicar un Encapsulate Field

public class Juego {
    	// ......
   	public void incrementar(Jugador j){
		j.incrementar();
	}
	public void decrementar(Jugador j){
		j.decrementar();
	}
}

public class Jugador {
    	private String nombre;
    	private String apellido;
    	private int puntuacion = 0;
	
	public void incrementar(){
		puntuacion += 100;
	}

	public void decrementar(){
		puntuacion += 50;
	}
}

2.3

Long Method (Metodo largo) -> En la clase el metodo "ultimosPost" realizar multiples operaciones ademas de retornar los ultimos post que no pertezcan a un usuario. Esto se soluciona con extraer en metodos mas chicos sus funciones (Extract Method) 

public List<Post> obtenerPostQueNoCorrespondanAUnUsuario(Usuario user){
   	 List<Post> postsOtrosUsuarios = new ArrayList<Post>();
   	 for (Post post : this.posts) {
         	if (!post.getUsuario().equals(user)) {
         		postsOtrosUsuarios.add(post);
        	}
    	}
	return postOtrosUsuarios;
}

public List<Post> ordenarPostPorFecha (List<Post> postsOtrosUsuarios){
	// ordena los posts por fecha
	for (int i = 0; i < postsOtrosUsuarios.size(); i++) {
        	int masNuevo = i;
       		for(int j= i +1; j < postsOtrosUsuarios.size(); j++) {
           		if (postsOtrosUsuarios.get(j).getFecha().isAfter(
     			postsOtrosUsuarios.get(masNuevo).getFecha())) {
              			masNuevo = j;
           		}    
       		}
      		Post unPost = postsOtrosUsuarios.set(i,postsOtrosUsuarios.get(masNuevo));
      		postsOtrosUsuarios.set(masNuevo, unPost);    
   	}
		
}

public List<Post> ultimosPosts(Usuario user, int cantidad) {
  	List<Post> postsOtrosUsuarios = obtenerPostQueNoCorrespondanAUnUsuario(user);
	List<Post> postsOrdenados = ordenarPostPorFecha(postsOtrosUsuarios);
	List<Post> ultimosPosts = new ArrayList<Post>();
    	int index = 0;
    	Iterator<Post> postIterator = postsOtrosUsuarios.iterator();
    	while (postIterator.hasNext() &&  index < cantidad) {
        	ultimosPosts.add(postIterator.next());
    	}
    	return ultimosPosts;
}

Envidia de atributos (Feature Envy) -> La clase PostApp pide datos a la clase Post para realizar una evaluacion, esto deberia ser responsabilidad de la clase la cual tiene las variables de instancia. Por lo tanto aplicamos un Move Method.

public boolean noEsDelUsuario (Usuario user) {
	return !this.usuario.equal(user)
}


public List<Post> obtenerPostQueNoCorrespondanAUnUsuario(Usuario user){
   	 List<Post> postsOtrosUsuarios = new ArrayList<Post>();
   	 for (Post post : this.posts) {
         	if (post.noEsDelUsuario(user)) {
         		postsOtrosUsuarios.add(post);
        	}
    	}
	return postOtrosUsuarios;
}

public List<Post> ordenarPostPorFecha (List<Post> postsOtrosUsuarios){
	// ordena los posts por fecha
	for (int i = 0; i < postsOtrosUsuarios.size(); i++) {
        	int masNuevo = i;
       		for(int j= i +1; j < postsOtrosUsuarios.size(); j++) {
           		if (postsOtrosUsuarios.get(j).getFecha().isAfter(
     			postsOtrosUsuarios.get(masNuevo).getFecha())) {
              			masNuevo = j;
           		}    
       		}
      		Post unPost = postsOtrosUsuarios.set(i,postsOtrosUsuarios.get(masNuevo));
      		postsOtrosUsuarios.set(masNuevo, unPost);    
   	}
		
}

public List<Post> ultimosPosts(Usuario user, int cantidad) {
  	List<Post> postsOtrosUsuarios = obtenerPostQueNoCorrespondanAUnUsuario(user);
	List<Post> postsOrdenados = ordenarPostPorFecha(postsOtrosUsuarios);
	List<Post> ultimosPosts = new ArrayList<Post>();
    	int index = 0;
    	Iterator<Post> postIterator = postsOtrosUsuarios.iterator();
    	while (postIterator.hasNext() &&  index < cantidad) {
        	ultimosPosts.add(postIterator.next());
    	}
    	return ultimosPosts;
}


Reinventar la rueda -> El metodo "ultimosPost" hace uso de varios for para recorrer las colecciones, esto podria ser mejorado con el fin de reducir su complejidad y achicar las lineas de codigo utilizando Streams


public List<Post> obtenerPostQueNoCorrespondanAUnUsuario(Usuario user){
	return posts.stream().filter(post -> post.noEsDelUsuario(user).collect(Collectors.toList());
}

//CREO QUE ORDENA AL REVES !! 
public List<Post> ordenarPostPorFecha (List<Post> postsAOrdenar){
	return postsAOrdenar.stream().sorted((p1,p2) -> p1.getFecha().compareTo(p2.getFecha())).collect(Collectors.toList());	
}

public List<Post> ultimosPosts(Usuario user, int cantidad) {
	List<Post> postsOtrosUsuarios = obtenerPostQueNoCorrespondanAUnUsuario(user);
	List<Post> postsOrdenados = ordenarPostPorFecha(postsOtrosUsuarios);
	return postOrdenados.stream().limit(cantidad).collect(Collectors.toList());

}

2.4

Envidia de atributos (Feature Envy) → El metodo “total()” de la clase Carrito solicita datos a la clase ItemCarrito y Producto para hacer un calculo, esto no deberia ser asi ya que la responsabilidad de hacer este calculo recae en IteamCarrito que es quien posee las variables de instancia 

public class Producto {
    	private String nombre;
    	private double precio;
    
    	public double getPrecio() {
        		return this.precio;
    	}
}

public class ItemCarrito {
   	private Producto producto;
    	private int cantidad;
        
   	 public Producto getProducto() {
       		return this.producto;
    	}
    
    	public int getCantidad() {
        		return this.cantidad;
    	}
	public double total(){
		return producto.getPrecio() * cantidad;
	}	
}

public class Carrito {
	private List<ItemCarrito> items;
    
	public double total() {
		return this.items.stream() .mapToDouble(item ->  item.total()).sum();
    	}
}

2.5

Clase de datos (Data class) → La clase Dirección funciona como una clase de datos ya que posee sus variables de instancia expuestas rompiendo el encapsulamiento, debemos aplicar un Encapsulate Class para mantener la integridad de los datos. 

public class Direccion {
	private String localidad;
	private String calle;
	private String numero;
	private String departamento;
}

Envidia de atributos (Feature Envy) → La clase Cliente con el metodo “getDireccionFormateada()” solicita y opera con datos de la clase Direccion, esto podria mejorarse aplicando un Move Method y formateando los datos directamente en la clase Dirección que es la que tiene los datos. 

public class Supermercado {
   	public void notificarPedido(long nroPedido, Cliente cliente) {
     		String notificacion = MessageFormat.format(“Estimado cliente, se le informa que 		hemos recibido su pedido con número {0}, el cual será enviado a la dirección {1}”, 		new Object[] { nroPedido, cliente.getDireccionFormateada() });

     		// lo imprimimos en pantalla, podría ser un mail, SMS, etc..
    		System.out.println(notificacion);
  	}
}

public class Cliente {
	public String getDireccionFormateada() {
		return this.direccion.formatearDatos()
	}
}

public class Direccion {	
	private String localidad;
	private String calle;
	private String numero;
	private String departamento;

	public String formatearDatos(){
		return localidad + “, ” + calle + “, ” + numero + “, ” + departamento; 
	}
}

Revisar 

2.6

Switch Statements (o if’s) → Utilizar ifs anidados para determinar el costo de la pelicula basado en el tipo de subscripcion y tener las descripciones mediante nombre es un problema ya que podria resolverse aplicando polimorfismo (Replace Conditional with Polymorphism) 

public class Usuario {
    	TipoSubscripcion tipoSubscripcion;
    	// ...

    	public void setTipoSubscripcion(TipoSubscripcion unTipo) {
    		this.tipoSubscripcion = unTipo;
   	 }
    
    	public double calcularCostoPelicula(Pelicula pelicula) {
    		return tipoSubscripcion.getPrecio(pelicula);	
	}

public interface TipoSubscripcion{
	public double getPrecio(Pelicula peli);
}

public class Basica implements TipoSubscripcion{
	public double getPrecio(Pelicula peli){
		return pelicula.getCosto() + pelicula.calcularCargoExtraPorEstreno(); 
	}
}

public class Familia implements TipoSubscripcion{
	public double getPrecio(Pelicula peli){
		return pelicula.getCosto() + pelicula.calcularCargoExtraPorEstreno()) * 0.90;
	}
}

public class Plus implements TipoSubscripcion{
	public double getPrecio(Pelicula peli){
		return pelicula.getCosto();
	}
}

public class Premium implements TipoSubscripcion{
	public double getPrecio(Pelicula peli){
		return pelicula.getCosto()  * 0.75;
	}
}

public class Pelicula {
	LocalDate fechaEstreno;
    	// …

    	public double getCosto() {
    		return this.costo;
    	}
    
    	public double calcularCargoExtraPorEstreno(){
		// Si la Película se estrenó 30 días antes de la fecha actual, retorna un cargo de 0$, 		caso contrario, retorna un cargo extra de 300$
   		 return (ChronoUnit.DAYS.between(this.fechaEstreno, LocalDate.now()) ) > 30 ? 0 : 		300;
    	}
}

Revisar 